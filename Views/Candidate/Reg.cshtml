@model UmangMicro.Models.RegModel
@using UmangMicro.Manager
@{
    ViewBag.Title = "Reg";
}

<div class="app-container app-theme-white body-tabs-shadow">
    <div class="app-container">
        <div class="h-100">
            <div class="h-100 no-gutters row">
                <div class="h-100 d-md-flex d-sm-block bg-white justify-content-center align-items-center col-md-12 col-lg-12">
                    <div class="mx-auto app-login-box col-sm-12 col-md-10 col-lg-9">
                        @using (Html.BeginForm("Reg", "Candidate", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data" }))
                        {
                            <div class="form-row">
                                <div class="col-md-12">
                                    <div style="text-align: center; font-weight: 700;">
                                        <h4><strong>Counseling (Registration)</strong></h4>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="position-relative form-group">
                                        @Html.HiddenFor(x => x.ID)
                                        @Html.AntiForgeryToken()

                                        @if (Model.ID != 0)
                                        {
                                            <strong class="text-primary">Case ID : <strong>@Model.CaseID</strong></strong>
                                        }
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.LabelFor(model => model.LanguangeType, htmlAttributes: new { @class = "" })
                                        @Html.DropDownListFor(m => m.LanguangeType, CommonModel.GetLanguangeType(), null, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.LanguangeType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.LabelFor(model => model.RegDate, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.RegDate, new { htmlAttributes = new { @class = "form-control datepicker", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.RegDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayName1, htmlAttributes: new { @class = "" })

                                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayMN, htmlAttributes: new { @class = "" })

                                        @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayFN, htmlAttributes: new { @class = "" })

                                        @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayDId, htmlAttributes: new { @class = "" })

                                        @Html.DropDownListFor(m => m.DistrictId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayBId, htmlAttributes: new { @class = "" })

                                        @Html.DropDownListFor(m => m.BlockId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayClId, htmlAttributes: new { @class = "" })

                                        @Html.DropDownListFor(m => m.ClusterId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.ClusterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayVillageTxt, htmlAttributes: new { @class = "" })

                                        @Html.EditorFor(model => model.Village, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Village, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @*<div class="form-group">
            @Html.Label(Model.CaseID, htmlAttributes: new { @class = "" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CaseID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CaseID, "", new { @class = "text-danger" })
            </div>
        </div>*@

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayVisitedTxt, htmlAttributes: new { @class = "" })

                                        @Html.DropDownListFor(m => m.Visited, CommonModel.GetVisited(), null, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.Visited, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayDOBTxt, htmlAttributes: new { @class = "" })

                                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control datepicker", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayAgeTxt, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                                        @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayMobileTxt, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @type = "number", @class = "form-control", @min = "10", @max = "10", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                                        @*, @min = "10", @max = "10"*@
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsSKTN, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsSkillTraining, item.Value, new { id = "IsSKTN" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsSkillTraining, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsMG, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsMarriage, item.Value, new { id = "IsMG" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsMarriage, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsSTDY, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsStudy, item.Value, new { id = "IsSTDY" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsStudy, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplaySC, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.SocialClass, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.SocialClass, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayTillSTDY, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.TillStudied, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.TillStudied, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsWK, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsWork, item.Value, new { id = "IsWK" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsWork, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayRESON, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsPSYMT, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsPsychometric, item.Value, new { id = "IsPSYMT" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsPsychometric, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                                <div class="col-md-6" id="div-psyr" style="display:none;">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayPSYRESULT, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.PsyYes_Result, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.PsyYes_Result, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayADVC, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.Advice, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Advice, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayIsFLWUP, htmlAttributes: new { @class = "" })
                                        <div class="checkbox">
                                            @foreach (var item in CommonModel.GetYesNo())
                                            {
                                                @Html.RadioButtonFor(model => model.IsFollowUp, item.Value, new { id = "IsFLW" + item.Value, @required = "required" }) @item.Text
                                            }
                                            @Html.ValidationMessageFor(model => model.IsFollowUp, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6" id="div-flwup" style="display:none;">
                                    <div class="position-relative form-group">
                                        @Html.Label(Model.DisplayFLWUP, htmlAttributes: new { @class = "" })
                                        @Html.EditorFor(model => model.FollowUp, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                        @Html.ValidationMessageFor(model => model.FollowUp, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="position-relative form-group" style="margin-left: 50% !important;">
                                        <input type="submit" name="submit" id="submit" value="Submit" class="btn btn-primary" />
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/JS/Master.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#LanguangeType').change(function () {

                var url = '@Url.Action("Reg", "Candidate")';
                window.location.href = url + '?LangType='+$(this).val();
                });

                BindDistrict('DistrictId', 20);
                $('#DistrictId').change(function () {
                    OnChangeDistrict('BlockId', $('#DistrictId').val());
                });
                $('#BlockId').change(function () {
                    OnChangeBlock('ClusterId', $('#BlockId').val());
                });
                $('#DOB').change(function () {
                    $('#Age').val(getAge($(this).val()));
                });
                $('input[name=IsFollowUp]').click(function () {
                    $('#FollowUp').val('');
                    if ($(this).val() == "1") {
                        $('#div-flwup').show();
                    }
                    else {
                        $('#div-flwup').hide();
                    }
                });
                $('input[name=IsPsychometric]').change(function () {
                    $('#PsyYes_Result').val('');
                    if ($(this).val() == "1") {
                        $('#div-psyr').show();
                    }
                    else {
                        $('#div-psyr').hide();
                    }
                });

                if ('@Model.ID' != '0' && '@Model.ID' != '') {
                    $('#DistrictId').val('@Model.DistrictId');
                        OnChangeDistrict('BlockId', '@Model.DistrictId');
                        $('#BlockId').val('@Model.BlockId');
                        OnChangeBlock('ClusterId', '@Model.BlockId');
                    $('#ClusterId').val('@Model.ClusterId');
                     $("#RegDate").val(moment('@Model.RegDate').format("DD-MMM-yyyy"));
                     $("#DOB").val(moment('@Model.DOB').format("DD-MMM-yyyy"));
                    //$("#DOB").val('@Model.DOB').toISOString().split('T')[0];
                    if ($('input[name=IsPsychometric]:checked').val()=="1") {
                        $('#div-psyr').show();
                    }
                    else {
                        $('#div-psyr').hide();
                    }
                    if ($('input[name=IsFollowUp]:checked').val() == "1") {
                        $('#div-flwup').show();
                    }
                    else {
                        $('#div-flwup').hide();
                    }
            };

            $('#formid').submit(function (e) {
                e.preventDefault();
                CUData();
            });

        });
        function CUData() {
            jQuery.event.trigger("ajaxStart");
            debugger;
            //var formDataJson = $('#formid').serialize();//formData.append('tax_file', $('input[type=file]')[0].files[0]);
            var formData = new FormData($('#formid')[0]);
            //var vl = $("#formid").validate();
            if ($("#formid").Valid()) {
                $.ajax({
                    type: "POST",
                    url: document.baseURI + "/Candidate/Reg/",
                    data: formData,
                    //use contentType, processData for sure.
                    //contentType: false,
                   // processData: false,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (resp) {
                      //  CreateToasterMessage("Registration", resp.Message, resp.StatusType);
                        toastr.error("Success", resp.Message);
                        jQuery.event.trigger("ajaxStop");
                    },
                    error: function (req, error) {
                        if (error === 'error') { error = req.statusText; }
                        var errormsg = 'There was a communication error: ' + error;
                       // CreateToasterMessage("Error", errormsg, "error");
                        toastr.error("Error", errormsg);
                        jQuery.event.trigger("ajaxStop");
                        return false;
                    }

                });
            }
            else {
                //CreateToasterMessage("Error", "All Record Validate !!", "error");
                toastr.error("Error", "All Record Validate !!");
                    jQuery.event.trigger("ajaxStop");
                    return false;
            }

              //type: 'POST',
             //contentType: false, // NEEDED, DON'T OMIT THIS (requires jQuery 1.6+)
            //processData: false, // NEEDED, DON'T OMIT THIS
           //Other options like success and etc

            // $('#global-loader').css('background', 'transparent').css('display', 'block');
            //FormData formdata=java
            //$.ajax({
            //    url: document.baseURI + 'Candidate/Reg',
            //    type: "Post",
            //    //data: {
            //    //    'StartDt': sd, 'EndDt': ed, 'LeadProcessedIds': leadIds
            //    //},
            //    //dataType: "json",
            //    //cache: false,
            //    //contentType: false,
            //    //processData: false,
            //    success: function (response) {
            //        if (response.StatusType == 'success') {
            //            CreateToasterMessage("Lead", response.Message, response.StatusType);
            //            BindData();
            //        }
            //        else {
            //            CreateToasterMessage("Error", response.Message, response.StatusType);
            //            //$('#global-loader').css('background', 'transparent').css('display', 'none');
            //        }
            //        //$('#global-loader').css('background', 'transparent').css('display', 'none');
            //    },
            //    error: function (req, error) {
            //        if (error === 'error') { error = req.statusText; }
            //        var errormsg = 'There was a communication error: ' + error;
            //        //$('#submission-data').html(errormsg);
            //        //$('#submission-data').addClass("text-danger");
            //        //$('#global-loader').css('background', 'transparent').css('display', 'none');
            //    }
            //});

        }
    </script>
}

@model UmangMicro.Models.TrainingCentreModel
@using UmangMicro.Manager
@{
    ViewBag.Title = "Training";
}
<style>

    .dataTables_filter {
        font-size: large !important;
        font-weight: normal !important;
    }

    input[aria-controls="DataList_0"] {
        height: 50px !important;
        width: 690px !important;
    }

    .card {
        padding: 20px !important;
    }

    .form-check-input {
        position: relative !important;
    }

    label {
        display: inline-block;
        max-width: 100%;
        margin-bottom: 5px;
        font-weight: 700;
        font-size: 15px !important;
    }

    .multiselect-container .multiselect-option .form-check, .multiselect-container .multiselect-group .form-check, .multiselect-container .multiselect-all .form-check {
        padding: 0 5px 0 10px !important;
    }

    .form-check-label {
        margin-left: 10px !important;
    }

    .custom-select {
        height: 32px !important
    }

    .multiselect-container {
        height: 200px;
        overflow-y;
        scroll;
        overflow-x: hidden;
    }

        .multiselect-container::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
            background-color: #F5F5F5;
        }

        .multiselect-container::-webkit-scrollbar {
            width: 10px;
            background-color: #F5F5F5;
        }

        .multiselect-container::-webkit-scrollbar-thumb {
            background-color: #0ae;
            background-image: -webkit-gradient(linear, 0 0, 0 100%, color-stop(.5, rgba(255, 255, 255, .2)), color-stop(.5, transparent), to(transparent));
        }

    .dropdown-item {
        width: 90% !important;
    }
    .btn-group, .btn-group-vertical {
        display: block !important;
    }
</style>
<div class="admin-breadcrumb">
    <h3>Training</h3>
    <div class="crumb">
        <a href="~/Training/Index">Training List</a> / Add Training
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                @using (Html.BeginForm("AddTraining", "Training", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data", noValidate = "novalidate" }))
                {
                    <input type="hidden" name="TeacherIds" id="TeacherIds" />
                    <input type="hidden" name="DistrictIds" id="DistrictIds" />
                    <input type="hidden" name="SchoolIds" id="SchoolIds" />
                    <input type="hidden" name="sessionIds" id="sessionIds" />
                    <input type="hidden" name="CohortIds" id="CohortIds" />
                    <div class="form-row col-md-12">
                        <div class="col-md-3">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Trainingtype, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.Trainingtype, CommonModel.GetTrainingType(), null, new { @class = "form-control", @id = "Trainingtype", @required = "required" })
                                @Html.ValidationMessageFor(model => model.Trainingtype, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_Roundcohort" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Round, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.Round, CommonModel.GetRound(), null, new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.Round, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3 dv-hd" id="dv_DistrictId" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.DistrictId, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.DistrictId, new List<SelectListItem>(), new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3 dv-hd" id="dv_DistrictMlt" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.DistrictMlt, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.DistrictMlt, new List<SelectListItem>(), new { @class = "form-control", @required = "required", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.DistrictMlt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3 dv-hd" id="dv_block" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.BlockId, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.BlockId, new List<SelectListItem>(), new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3 dv-hd" id="dv_SchoolId" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.SchoolId, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.SchoolId, new List<SelectListItem>(), new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.SchoolId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3 dv-hd" id="dv_SchoolMlt" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.SchoolMlt, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.SchoolMlt, new List<SelectListItem>(), new { @class = "form-control", @required = "required", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.SchoolMlt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_Cohortmlt" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Cohortmlt, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.Cohortmlt, CommonModel.GetCohort(false), null, new { @class = "form-control", @required = "required", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.Cohortmlt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="col-md-3" id="dv_session" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.sessionMlt, htmlAttributes: new { @class = "" })<br />
                                @Html.DropDownListFor(model => model.sessionMlt, new List<SelectListItem>(), new { @class = "form-control", @required = "required", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.sessionMlt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_nameofteacher" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Nameofteacher, htmlAttributes: new { @class = "" })<br />
                                @*@Html.DropDownListFor(model => model.Nameofteacher, CommonModel.GetTeachers().Where(x => x.Value != "0"), new { @class = "form-control", @required = "required", @multiple = "multiple" })*@
                                @Html.DropDownListFor(model => model.Nameofteacher, new List<SelectListItem>(), new { @class = "form-control", @required = "required", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.Nameofteacher, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_date" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(m => m.Date, new { @class = "Col-md-2 col-form-label" })<em></em>
                                @Html.EditorFor(m => m.Date, new { htmlAttributes = new { @placeholder = "Enter the Date", @class = "form-control datepicker", @required = "required" } })
                                @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_teachertrained" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(m => m.Noofteachertrained, new { @class = "Col-md-2 col-form-label" })<em></em>
                                @Html.EditorFor(m => m.Noofteachertrained, new { htmlAttributes = new { @placeholder = "Enter the Teacher Trained", @class = "form-control required", @required = "required", maxlength = "3" } })
                                @Html.ValidationMessageFor(m => m.Noofteachertrained, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" id="dv_comment" style="display:none">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "" })<br />
                                @Html.TextAreaFor(model => model.Comment, new { @class = "form-control", @required = "required", @rows = "4", @maxlength = "500" })
                                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12" id="divPlanInput">
                        </div>
                        <div class="col-md-12">
                            <br />
                            <div class="position-relative form-group" style="margin-left: 50% !important;">
                                <input type="submit" name="submit" id="submit" value="Submit" class="btn btn-primary" />
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <span style="line-height:91px;">
                                        <a href="~/Training/AddTraining" class="btn btn-info text-white">Reset</a>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
            <script src="~/Scripts/JS/Master.js"></script>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
            <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/js/bootstrap-multiselect.js"></script>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/css/bootstrap-multiselect.css">
            <script type="text/javascript">
                $(document).ready(function () {
                    $('.dv-hd').hide();



                    if ('@CommonModel.GetUserRole()' === '@MvcApplication.CUser.Role') {
                        $('#Trainingtype').val(('2').toLowerCase()).attr("style", "pointer-events: none;");
                        Onchgetraingtype();
                        $('#DistrictId').val(('@MvcApplication.CUser.DistrictId').toLowerCase()).prop("disabled", true);
                        OnChagDistricts('BlockId', $('#DistrictId').val());
                        $('#BlockId').val(('@MvcApplication.CUser.BlockId').toLowerCase()).prop("disabled", true);
                        GetSchool('SchoolId', '', $('#DistrictId').val(), $('#BlockId').val());
                       // $('#SchoolId').val(('@MvcApplication.CUser.SchoolId').toLowerCase()).prop("disabled", true);
                        $('#SchoolId').val(('@MvcApplication.CUser.SchoolId').toLowerCase()).attr("style", "pointer-events: none;");
                    }

                    if ('@CommonModel.GetUserRoleConsultantDist()' === '@MvcApplication.CUser.Role') {
                      //  $('#DistrictId').val(('@MvcApplication.CUser.DistrictId').toLowerCase()).prop("disabled", true);
                       // OnChagDistricts('BlockId', $('#DistrictId').val());
                        $('#Trainingtype').val(('1').toLowerCase()).attr("style", "pointer-events: none;");
                        Onchgetraingtype();
                    }
                    $('#Trainingtype').change(function () {
                        Onchgetraingtype();
                    });
                    ///School Level teacher
                    $('#DistrictId').change(function () {
                        GetBlock('BlockId', '', $('#DistrictId').val());
                    });
                    $('#BlockId').change(function () {
                        GetSchool('SchoolId', '', $('#DistrictId').val(), $('#BlockId').val());
                    });
                    ///State Leve
                    $('#DistrictMlt').change(function () {
                        debugger;
                        $('#SchoolMlt').empty();
                        $('#Nameofteacher').empty();
                        var DistrictMlt = $('#DistrictMlt').val();
                        if (DistrictMlt != null && DistrictMlt != undefined) {
                            if (DistrictMlt.length != 0) {
                                GetSchool('SchoolMlt', '', $('#DistrictMlt').val().join(','), '', false);
                                $('#SchoolMlt').multiselect({
                                    includeSelectAllOption: true,
                                    enableFiltering: true,
                                    buttonWidth: '100%',
                                    multiple: true
                                });
                                $('#SchoolMlt').multiselect('rebuild');
                                 }
                             }
                    });
                    $('#SchoolMlt').change(function () {
                        debugger;
                        var SchoolMlt = $('#SchoolMlt').val();
                        var DistrictMlt = $('#DistrictMlt').val();
                        if (SchoolMlt != null && SchoolMlt != undefined && DistrictMlt != null && DistrictMlt != undefined) {
                            if (SchoolMlt.length != 0 && DistrictMlt.length != 0) {
                                BindGetTeacherList('Nameofteacher', '', $('#DistrictMlt').val().join(','), $('#SchoolMlt').val().join(','), false);
                                $('#Nameofteacher').multiselect({
                                    includeSelectAllOption: true,
                                    enableFiltering: true,
                                    buttonWidth: '100%',
                                    multiple: true
                                });

                                $('#Nameofteacher').multiselect('rebuild');
                            }
                        }
                    });

                  



                    $("#formid").on("submit", function (event) {
                        event.preventDefault();
                        if ($('#Trainingtype').val() == "1") {

                            $('#DistrictIds').val($('#DistrictMlt').val().join(','));
                            $('#SchoolIds').val($('#SchoolMlt').val().join(','));
                            $('#TeacherIds').val($('#Nameofteacher').val().join(','));
                        }
                        var sessionMlt = $('#sessionMlt').val();
                        if (sessionMlt != null && sessionMlt != undefined) {
                            if (sessionMlt.length != 0) {
                                sessionMlt = sessionMlt.join(',');
                                $('#sessionIds').val(sessionMlt);
                                }
                        }
                        var Cohortmlt = $('#Cohortmlt').val();
                        if (Cohortmlt != null && Cohortmlt != undefined) {
                            if (Cohortmlt.length != 0) {
                                Cohortmlt = Cohortmlt.join(',');
                                $('#CohortIds').val(Cohortmlt);
                            }
                        }
                       // $('#sessionIds').val($('#sessionMlt').val().join(','));
                        var formData = new FormData(this);
                        $('#submit').prop('disabled', true);
                        $.ajax({
                            type: "POST",
                            url: $(this).attr("action"),
                            data: formData,
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (resp) {
                                if (resp.StatusType == "success") {
                                    toastr.success("Success", resp.Message);
                                    $('#submit').prop('disabled', true);
                                } else {
                                    toastr.error("Error", resp.Message);
                                    $('#submit').prop('disabled', false);
                                }
                            },
                            error: function (req, error) {
                                var errormsg = 'There was a communication error: ' + error;
                                toastr.error("Error", errormsg);
                                $('#submit').prop('disabled', false);
                            }
                        });
                    });

                     $('#Cohortmlt').change(function () {
            var cohortValues = $(this).val();
            var sessionList = [];

            if (cohortValues != null && cohortValues.length > 0) {
                cohortValues.forEach(function (cohortValue) {
                    var sessions = [];
                    if (cohortValue == "1") {
                        sessions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(CommonModel.GetModularMaster68(false)));
                    } else if (cohortValue == "2") {
                        sessions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(CommonModel.GetModularMaster911(false)));
                    } else if (cohortValue == "3") {
                        sessions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(CommonModel.GetModularMaster1112(false)));
                    }

                    sessionList = sessionList.concat(sessions);
                });


                sessionList = sessionList.filter((value, index, self) =>
                    index === self.findIndex((t) => (
                        t.Value === value.Value && t.Text === value.Text
                    ))
                );
            }


                        $('#sessionMlt').empty();
                        $.each(sessionList, function (index, item) {
                            $('#sessionMlt').append($('<option>', {
                                value: item.Value,
                                text: item.Text
                            }));
                        });
                        $('#sessionMlt').multiselect('rebuild');
                    });

                });
                function Onchgetraingtype() {
                    $('#dv_date').hide();
                    $('#dv_teachertrained').hide();
                    $('#dv_School').hide();
                    $('#dv_session').hide();
                    $('#dv_nameofteacher').hide();
                    $('.dv-hd').hide();
                    $('#dv_comment').hide();
                    $('#dv_block').hide();
                    $('#dv_DistrictMlt').hide();
                    $('#dv_DistrictId').hide();
                    $('#dv_Roundcohort').hide();
                    $('#dv_Cohortmlt').hide();

                    $('#DistrictId').val('0');
                    $('#BlockId').val('0');
                    $('#SchoolId').val('0');
                    $('#Date').val('');
                    $('#Cohortmlt').val('');
                    $('#Round').val('0');
                    $('#sessionMlt').empty();
                    $('#Comment').val('');
                    $('#DistrictMlt').empty();
                    $('#SchoolMlt').empty();
                    $('#SchoolMlt').prop("disabled", false);
                    $('#Nameofteacher').empty();
                    $("#Nameofteacher option:selected").prop("selected", false);
                    $('#Noofteachertrained').val('');

                    if ($('#Trainingtype').val() == "1") {
                        $('#dv_date').show();
                        $('#dv_SchoolMlt').show();
                        $('#dv_session').show();
                        $('#dv_Cohortmlt').show();
                        $('#dv_Roundcohort').show();
                        $('#dv_comment').show();
                        $('#dv_nameofteacher').show();
                        $('#dv_DistrictMlt').show();
                        $('#dv_DistrictId').hide();
                        GetDistrict('DistrictMlt', '', false)
                        $('#DistrictMlt').multiselect({
                            includeSelectAllOption: true,
                            enableFiltering: true,
                            buttonWidth: '100%',
                            multiple: true
                            

                        });
                        $('#DistrictMlt').multiselect('rebuild');

                       

                    } else if ($('#Trainingtype').val() == "2") {
                        GetDistrict('DistrictId', '')
                        $('#dv_date').show();
                        $('#dv_School').show();
                        $('#dv_session').show();
                        $('#dv_comment').show();
                        $('#dv_teachertrained').show();
                        $('#dv_block').show();
                        $('#dv_DistrictId').show();
                        $('#dv_Cohortmlt').show();
                        $('.dv-hd').show();
                        $('#dv_DistrictMlt').hide();
                        $('#dv_SchoolMlt').hide();
                        $('#dv_comment').hide();
                    }
                     $('#sessionMlt').multiselect({
                         includeSelectAllOption: true,
                         enableFiltering: true,
                         buttonWidth: '100%',
                         multiple: true
                     });
                     $('#Cohortmlt').multiselect({
                         includeSelectAllOption: true,
                         enableFiltering: true,
                         buttonWidth: '100%',
                         multiple: true
                     });
                }

            </script>
        }

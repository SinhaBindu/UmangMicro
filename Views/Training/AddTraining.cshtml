@model UmangMicro.Models.TrainingCentreModel
@using UmangMicro.Manager
@{
    ViewBag.Title = "Training";
}

<style>
    .dataTables_filter {
        font-size: large !important;
        font-weight: normal !important;
    }

    input[aria-controls="DataList_0"] {
        height: 50px !important;
        width: 690px !important;
    }

    .card {
        padding: 20px !important;
    }

    .form-check-input {
        position: relative !important;
    }

    label {
        display: inline-block;
        max-width: 100%;
        margin-bottom: 5px;
        font-weight: 700;
        font-size: 15px !important;
    }
</style>

<div class="admin-breadcrumb">
    <h3>Training</h3>
    <div class="crumb">
        <a href="~/Training/Training">Training</a> / Add Training
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">

                @using (Html.BeginForm("AddTraining", "Training", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data", noValidate = "novalidate" }))
                {
                 <input type="hidden" name="TeacherIds" id="TeacherIds" />
                <div class="form-row col-md-12">
                    <div class="col-md-3">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.Trainingtype, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.Trainingtype, CommonModel.GetTrainingType(), null, new { @class = "form-control", @id = "Trainingtype", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Trainingtype, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-3 dv-hd">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.DistrictId, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.DistrictId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3 dv-hd">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.BlockId, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.BlockId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3 dv-hd" >
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.SchoolId, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.SchoolId, new List<SelectListItem>(), null, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.SchoolId, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="col-md3" id="dv_Round" style="display:none">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.Round, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.Round, CommonModel.GetRound(), null, new { @class = "form-control", @id = "Round", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Round, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3" id="dv_nameofteacher" style="display:none">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(model => model.Nameofteacher, htmlAttributes: new { @class = "" })<br />
                            @Html.DropDownListFor(model => model.Nameofteacher, CommonModel.GetTeachers().Where(x => x.Value != "0"), null, new { @class = "form-control display:flex;", @required = "required", @multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.Nameofteacher, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-3" id="dv_date" style="display:none">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(m => m.Date, new { @class = "Col-md-2 col-form-label" })<em></em>
                            @Html.EditorFor(m => m.Date, new { htmlAttributes = new { @placeholder = "Enter the Date", @class = "form-control datepicker", @id = "Date", @required = "required" } })
                            @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3" id="dv_teachertrained" style="display:none">
                        <div class="position-relative form-group">
                            <span class="text-danger">*</span>@Html.LabelFor(m => m.Noofteachertrained, new { @class = "Col-md-2 col-form-label" })<em></em>
                            @Html.EditorFor(m => m.Noofteachertrained, new { htmlAttributes = new { @placeholder = "Enter the Teacher Trained", @class = "form-control required", @id = "Noofteachertrained", @required = "required" } })
                            @Html.ValidationMessageFor(m => m.Noofteachertrained, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12" id="divPlanInput">
                    </div>

                    <div class="col-md-12">
                        <br />
                        <div class="position-relative form-group" style="margin-left: 50% !important;">
                            <input type="submit" name="submit" id="submit" value="Submit" class="btn btn-primary" />
                            @if (User.Identity.IsAuthenticated)
                            {
                                <a href="~/Training/Training" class="btn btn-info text-white">Reset</a>
                            }
                        </div>
                    </div>

                </div>
                }
            </div>
        </div>

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
            <script src="~/Scripts/JS/Master.js"></script>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
            <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/js/bootstrap-multiselect.js"></script>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.13/css/bootstrap-multiselect.css">

            <script type="text/javascript">
                $(document).ready(function () {
                    $('.dv-hd').hide();

                      GetDistrict('DistrictId');

            if ('@CommonModel.GetUserRole()' === '@MvcApplication.CUser.Role') {
                $('#DistrictId').val(('@MvcApplication.CUser.DistrictId').toLowerCase());
                $('#DistrictId').css("pointer-events", "none");
                OnChagDistricts('BlockId', $('#DistrictId').val());
                $('#BlockId').val(('@MvcApplication.CUser.BlockId').toLowerCase());
                $('#BlockId').css("pointer-events", "none");
                GetSchool('SchoolId', '', $('#DistrictId').val(), $('#BlockId').val());
                $('#SchoolId').val(('@MvcApplication.CUser.SchoolId').toLowerCase());
                $('#SchoolId').css("pointer-events", "none");
            }

            if ('@CommonModel.GetUserRoleConsultantDist()' === '@MvcApplication.CUser.Role') {
                $('#DistrictId').val(('@MvcApplication.CUser.DistrictId').toLowerCase());
                $('#DistrictId').css("pointer-events", "none");
                OnChagDistricts('BlockId', $('#DistrictId').val());
            }

            $('#DistrictId').change(function () {
                OnChagDistricts('BlockId', $('#DistrictId').val());
            });

            $('#BlockId').change(function () {
                GetSchool('SchoolId', '', $('#DistrictId').val(), $('#BlockId').val());
            });

                    $('#Nameofteacher').multiselect({
                        includeSelectAllOption: true,
                    });

                    $('#Trainingtype').change(function () {
                        $('#dv_date').hide();
                        $('#dv_teachertrained').hide();
                        $('#dv_Round').hide();
                        $('#dv_nameofteacher').hide();
                        $('.dv-hd').hide();
                        $('#DistrictId').val('0');
                        $('#BlockId').val('0');
                        $('#SchoolId').val('0');
                        $('#dv_date').val('0');
                        $('#dv_teachertrained').val('');

                        if ($(this).val() == "1") {
                            $('#dv_date').show();
                            $('#dv_Round').show();
                            $('#dv_nameofteacher').show();
                        } else if ($(this).val() == "2") {
                            $('#dv_date').show();
                            $('.dv-hd').show();
                            $('#dv_teachertrained').show();
                        }
                    });

                    $("#formid").on("submit", function (event) {
                        event.preventDefault();

                       
                        var Nameofteacher = $('#Nameofteacher').val();
                        if (Nameofteacher != null && Nameofteacher != undefined) {
                            if (Nameofteacher.length != 0) {
                                Nameofteacher = Nameofteacher.join(',');
                                $('#TeacherIds').val(Nameofteacher);
                            }
                        }

                        var formData = new FormData(this);
                        
                        //formData.append('Nameofteacher', Nameofteacher);


                        $.ajax({
                            type: "POST",
                            url: $(this).attr("action"),
                            data: formData,
                            cache: false,
                            contentType: false,
                            processData: false,
                            success: function (resp) {
                                if (resp.StatusType == "success") {
                                    toastr.success("Success", resp.Message);
                                } else {
                                    toastr.error("Error", resp.Message);
                                }
                            },
                            error: function (req, error) {
                                var errormsg = 'There was a communication error: ' + error;
                                toastr.error("Error", errormsg);
                            }
                        });
                    });
                });
            </script>
        }
    </div>
</div>

@model UmangMicro.Models.MicroCaseModel
@using UmangMicro.Manager
@{
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    var PPath = ""; var BPath = ""; var DPath = "";
    if (Model.ID > 0)
    {
        PPath = UmangMicro.Manager.CommonModel.GetFileUrl(Model.PhotoPath);
        BPath = UmangMicro.Manager.CommonModel.GetFileUrl(Model.BannerPath);
        DPath = UmangMicro.Manager.CommonModel.GetFileUrl(Model.DocumentPath);
        //var str = Model.Date != null ? Convert.ToDateTime(Model.Date.Value.ToString("dd-MMM-yyyy")) : Model.Date;
    }
}

<style>
    .tox-notification {
        display: none !important;
    }

    .tox-statusbar__branding {
        display: none !important;
    }

    .ulcl {
        columns: 6;
        -webkit-columns: 6;
        -moz-columns: 6;
    }
</style>

<div class="admin-breadcrumb">
    <h3>Add Case Studies</h3>
    <div class="crumb">
        <a href="/">Dashboard</a> / Add Case Studies
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                @using (Html.BeginForm("MicroCase", "Master", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data" }))
                {
                    <div class="form-row">
                        <div class="col-md-7">
                            <div style="text-align: right; font-weight: 700;">
                                <h4><strong>Add Case Studies</strong></h4>
                            </div>
                            <div class="col-md-5">
                                <div id="div-download"></div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="position-relative form-group">
                                @Html.HiddenFor(model => model.ID)
                                @Html.AntiForgeryToken()
                                @Html.ValidationSummary("", new { @class = "text-danger ulcl" })
                                <div class="col-md-12">@Html.Partial("_Alerts")</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>@Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "" })
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control datepicker", @required = "required", @maxlength = "11", @placeholder = "dd-mmm-yyyy" } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <span class="text-danger">*</span>
                                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "" })
                                @Html.DropDownListFor(m => m.Category, CommonModel.GetCategory(), "Select", new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <span class="text-danger">*</span>
                                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "" })
                                @Html.TextAreaFor(model => model.Title, new { @class = "form-control", @required = "required", @rows = "2", @cols = "10" })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <span class="text-danger">*</span>
                                @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "" })
                                @Html.TextAreaFor(model => model.Subject, new { @class = "form-control", @required = "required", @rows = "2", @cols = "10" })
                                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="position-relative form-group">
                                <span class="text-danger"></span>
                                <label>Profile (Image)</label>
                                <input type="file" name="Photo" id="Photo" accept="image/*" class="form-control" />
                                @Html.ValidationMessageFor(model => model.Photo, "", new { @class = "text-danger" })
                                @if (!string.IsNullOrWhiteSpace(PPath))
                                {
                                    <a href="@PPath" target="_blank" id="PPath"><strong><i class="fa fa-download"></i></strong></a>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="position-relative form-group">
                                <span class="text-danger"></span>
                                <label>Upload Banner (Image)</label>
                                <input type="file" name="Banner" id="Banner" accept="image/*" class="form-control" />
                                @Html.ValidationMessageFor(model => model.Banner, "", new { @class = "text-danger" })
                                @if (!string.IsNullOrWhiteSpace(BPath))
                                {
                                    <a href="@BPath" target="_blank" id="BPath"><strong><i class="fa fa-download"></i></strong></a>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="position-relative form-group">
                                <span class="text-danger"></span>
                                <label>Upload Document (PDF)</label>
                                <input type="file" name="Document" id="Document" accept="application/pdf" class="form-control" />
                                @Html.ValidationMessageFor(model => model.Document, "", new { @class = "text-danger" })
                                @if (!string.IsNullOrWhiteSpace(DPath))
                                {
                                    <a href="@DPath" target="_blank" id="DPath"><strong><i class="fa fa-download"></i></strong></a>
                                }
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="position-relative form-group">
                                <span class="text-danger">*</span>
                                @Html.LabelFor(model => model.HtmlEditor, htmlAttributes: new { @class = "" })
                                <textarea id="HtmlEditor" name="HtmlEditor" required>@Model.HtmlEditor</textarea>
                                @Html.ValidationMessageFor(model => model.HtmlEditor, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mt-4 mb-4 d-flex align-items-center">
                                <div class="ml-auto">
                                    <input type="submit" class="btn-wide btn-pill btn-shadow btn-hover-shine btn btn-primary btn-small" value="Submit" />
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="col-md-12">
                        <div id="submission-data"></div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/JS/Master.js"></script>
    <!-- Include Editor JS files. -->
    @*<script src="https://cdn.tiny.cloud/1/sycl3w1d8npikolltg56dvhf7yiehfqo9a8sbnei0nokfddz/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>*@
    <script src="https://cdn.tiny.cloud/1/4vv1zgyc50xd1ejbej3jkdy689m6pujcjrr6elpp8lowqxz4/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>

     @*<script src="https://cdn.tiny.cloud/1/7gu1vcvlkyin1hekdxcrd3pyzmiisyp0zu3e19ml3uls7rdq/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>*@


    <script>

        //new FroalaEditor('textarea#froala-editor');
        //new FroalaEditor('textarea#froala-editor', {
        //    heightMin: 800,
        //    heightMax: 1000
        //})

        $(function () {
            LoadEditor();
            BindData();

            if ('@Model.ID' != '' && '@Model.ID' != '0') {
                 $("#Date").val(moment('@Model.Date').format("DD-MMM-yyyy"));
            }
            else {
                ClearInput();
            }

            /* Started Submitted Tab */
            $("#formid").on("submit", function (event) {
                event.preventDefault();
                debugger;
                var isvalid = $("#formid").valid();
                //var formData = $(this).serialize();
                const formData = new FormData();
                if (tinymce.EditorManager.get('HtmlEditor').getContent() === '') {
                    toastr.error("Case Studies Description", "Case studies description can not be empty.", "error");
                    isvalid = false; return false;
                }
                formData.append('ID', '@Model.ID');
                if ($('#Subject').val() === '' || $('#Category').val() === '' || $('#Date').val() === '') {
                    isvalid = false; return false;
                }
                jQuery.event.trigger("ajaxStart");
                if ($('#Date').val() != '') {
                    formData.append('Date', $('#Date').val());
                }
                if ($('#Title').val() != '') {
                    formData.append('Title', $('#Title').val());
                }
                if ($('#Subject').val() != '') {
                    formData.append('Subject', $('#Subject').val());
                }
                if ($('#Category').val() != '') {
                    formData.append('Category', $('#Category').val());
                }
                if (tinymce.EditorManager.get('HtmlEditor').getContent() != '') {
                    //var htmlEditor=tinymce.EditorManager.get('HtmlEditor').getContent();
                    let content = tinymce.get("HtmlEditor").getContent();
                    //$("textarea[name=HtmlEditor]").val(content);
                    formData.append('HtmlEditor', content);
                }
                if ($('#Banner').get(0).files.length != 0) {
                    formData.append('Banner', $('#Banner')[0].files[0]);
                }
                if ($('#Photo').get(0).files.length != 0) {
                    formData.append('Photo', $('#Photo')[0].files[0]);
                }
                if ($('#Document').get(0).files.length != 0) {
                    formData.append('Document', $('#Document')[0].files[0]);
                }

                if (isvalid) {
                    $.ajax({
                        type: "POST",
                        url: document.baseURI + "/Master/MicroCase/",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (resp) {
                            if (resp.StatusType == "success") {
                                toastr.success("Success", resp.Message);
                                jQuery.event.trigger("ajaxStop");
                                ClearInput();
                                BindData();
                                var url = '@Url.Action("MicroCase", "Master")';
                                window.location.href = url;
                            }
                        },
                        error: function (req, error) {
                            if (error === 'error') { error = req.statusText; }
                            var errormsg = 'There was a communication error: ' + error;
                            // CreateToasterMessage("Error", errormsg, "error");
                            toastr.error("Error", errormsg);
                            jQuery.event.trigger("ajaxStop");
                            return false;
                        }
                    });
                }
                else {
                    //CreateToasterMessage("Error", "All Record Validate !!", "error");
                    toastr.error("Error", "All Record Validate !!");
                    jQuery.event.trigger("ajaxStop");
                    return false;
                }
            });/*End Submitted Closed Tab  */

            function BindData() {
                jQuery.event.trigger("ajaxStart");
                $('#submission-data').removeClass("text-danger");
                var url = $('#submission-form').attr("action");
                var formData = $('#submission-form').serialize();
                $.ajax({
                    url: document.baseURI + "/Master/GetMicroCase/",
                    type: "Post",
                    data: '',//{ 'District': District, 'Block': Block },
                    success: function (resp) {
                        if (resp.IsSuccess) {
                            jQuery.event.trigger("ajaxStop");
                            $('#submission-data').html(resp.Data);
                            if ($.fn.dataTable.isDataTable('#DataList')) {
                                $("#DataList").dataTable().fnDestroy();
                            }
                            table = $('#DataList').DataTable({
                                //scrollY: "400px",
                                //scrollX: true,
                                //scrollCollapse: true,
                                //paging: false,
                                pageLength: 100,
                                fixedColumns: {
                                    leftColumns: 1,
                                    rightColumns: 1
                                },
                                buttons: [{
                                    extend: 'excel', text: '<span><i class="fa fa-download"></i>Export</span>', title: 'User Lists',//$('#IDDistrict option:selected').text() +
                                    className: 'btn btn-primary button-icon mr-3 mt-1 mb-1',
                                    filename: 'User List',
                                    exportOptions: { modifier: { page: 'all' } }
                                }],
                            });
                            $('.dataTables_filter input[type="search"]').css(
                                { 'width': '500px', 'display': 'inline-block' }
                            );
                            $('#div-download').empty();
                            //table.buttons().container().appendTo($('#div-download'));
                        }
                        else {
                            $('#submission-data').html("Record Not Found !!");//TO DO
                            $('#submission-data').addClass("text-danger");//TO DO
                        }
                    },
                    error: function (req, error) {
                        if (error === 'error') { error = req.statusText; }
                        var errormsg = 'There was a communication error: ' + error;
                        $('#submission-data').html(errormsg);
                        jQuery.event.trigger("ajaxStop");
                        return false;
                    }
                });
            }

        });

        function LoadEditor() {
            tinymce.init({
                selector: '#HtmlEditor',
                plugins: 'a11ychecker advcode casechange export formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tableofcontents tinycomments tinymcespellchecker',
                toolbar: 'a11ycheck addcomment showcomments casechange checklist code export formatpainter pageembed permanentpen table tableofcontents',
                toolbar_mode: 'floating',
                tinycomments_mode: 'embedded',
                tinycomments_author: 'Author name',
                //codesample_global_prismjs: true
                //paste_data_images: false,
                smart_paste: false,
            });
            tinymce.init({
                selector: '#HtmlEditor',
                plugins: 'a11ychecker advcode casechange export formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tableofcontents tinycomments tinymcespellchecker',
                toolbar: 'a11ycheck addcomment showcomments casechange checklist code export formatpainter pageembed permanentpen table tableofcontents',
                toolbar_mode: 'floating',
                tinycomments_mode: 'embedded',
                tinycomments_author: 'Author name',
                //codesample_global_prismjs: true

            });
        }
        function ClearInput() {
            $('#Subject').val('');
            $('#Date').val('');
            $('#Photo').val('');
            $('#Category').val('');
            $('#PPath').attr('href','');
            $('#BPath').attr('href', '');
            $('#PPath').css('display', 'none');
            $('#BPath').css('display', 'none');
            var content = "";
            tinymce.get("HtmlEditor").setContent(content);
        }

    </script>

}
